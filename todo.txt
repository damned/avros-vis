*NB: moved previous fine-grained, unprioritised list of UX, tech and ideas to `todo-detail.txt`*

cards - initial priority, grouped by consecutive feature set

* vr layout from basic scene json - entities and edges

[x] - load entities from json
[x] - load edges from json
[x] - snap to grid

* basic ux tweaks

[x] - user move up and down
[x] - user move grabbing anywhere

* persist layout changes

[x] - serialize to json (write to console, can be used to overrwrite static json)
[x] - GET from server on startup
[x] - read positions from graph json
[x] - serialize on move
[x] - PUT to server (overwrite named json) on move
[x] - server PUT async w/ graph id

* build out basic graph for purposes of general understanding

[x] - add queue edge type with changed line style
[x] - add queue vs http edge legend
[x] - add types for datastores - dbs and filestores
[x] - add entity legend
[x] - add service types
[x] - add api gateways and lambdas
[x] - add ability to label edges

* review, re-plan

[x] - what purpose? convey understanding
[x] - currently? good static high level understanding
[x] - what's next? detail of how processing
[x] - how to convey that? per scenario, show flow, allow detail insight
[x] - how to show? recorded walkthrough; or browser step through (description, viewpoint and animation)

* animate data flows, sequences

[ ] - animate example message flow along each queue (triggers every few seconds)
[ ] - happy path flow - animated message triggers next service (happy path assumed as goes on to another service)
[ ] - ability to pause, step
[ ] - specify happy path corrections statically (hand coded json?)
[ ] - menu of scenarios

* visualisation improvements

[ ] - horizontal group (can help edit: move multiple)
[ ] - add topic as metadata on queue
[ ] - AZs as horizontal layers

* in-browser review improvements

[ ] - set viewpoints and easy nav-to
[ ] - lerp to viewpoint

* further ux improvements

[ ] - user rotate
[ ] - undo / redo
[ ] - merge updated data

* slickness improvements

[ ] - label along edges
[ ] - design background / room
[ ] - de-conflict labels - moveability? user-attraction?
[ ] - rounded rect group
[ ] - 3d icons for entities (3dicons.co?)

* de-prioritized

[ ] - PUT copies to timestamped backup before overwrite

* automated graph creation from repos (services and queues)

[ ] - add services from single repo to scene json (url, dir as e.g. command line variables, probably just grep)
[ ] - enumerate services from json source list (repo url, dir etc.)
[ ] - add topics as entity with edge from publisher via iam (maybe needs terraform run)
[ ] - add queues as edges from topics to consumer via iam

* add datastores (databases and buckets, all from repo parse)

[ ] - add dynamodb tables
[ ] - relate to dynamodb tables by iam
[ ] - add s3 bucketsgit@github.com:damned/tf-g* persist layout changes
[ ] - relate to s3 buckets by iam
[ ] - map entity types to styles in static json

* add http flows and lambdas

[ ] - add http to lbs via security groups
[ ] - add lbs to ecs via security groups
[ ] - add lambdas
[ ] - add lambdas to datastores
[ ] - add api gateways to lambdas

---

* remainingg Ste feedback notes

- watch versions on persistence - maybe add migrations?


